{"version":3,"file":"static/js/394.87dc7623.chunk.js","mappings":"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","sources":["components/Experience/Particles.jsx","components/Experience/Experience.jsx"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\n\nconst PARTICLE_COUNT = 36;\nconst COLOR = 'rgba(0,243,255,0.8)';\nconst GLOW = 'rgba(0,243,255,0.25)';\nconst MIN_SIZE = 1.5;\nconst MAX_SIZE = 3.5;\nconst MIN_SPEED = 0.08;\nconst MAX_SPEED = 0.25;\n\nfunction randomBetween(a, b) {\n  return a + Math.random() * (b - a);\n}\n\nfunction createParticle(width, height) {\n  const angle = Math.random() * 2 * Math.PI;\n  return {\n    x: Math.random() * width,\n    y: Math.random() * height,\n    size: randomBetween(MIN_SIZE, MAX_SIZE),\n    baseSize: 0,\n    speed: randomBetween(MIN_SPEED, MAX_SPEED),\n    direction: angle,\n    flicker: Math.random() * Math.PI * 2,\n    flickerSpeed: randomBetween(0.01, 0.03),\n    flashTimer: Math.random() * 6 + 2, // seconds\n    flash: false,\n    opacity: randomBetween(0.7, 1),\n  };\n}\n\nconst Particles = () => {\n  const canvasRef = useRef();\n  const animationRef = useRef();\n  const particles = useRef([]);\n  const lastTime = useRef(0);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    let width = window.innerWidth;\n    let height = window.innerHeight;\n    let dpr = window.devicePixelRatio || 1;\n    canvas.width = width * dpr;\n    canvas.height = height * dpr;\n    canvas.style.width = width + 'px';\n    canvas.style.height = height + 'px';\n    ctx.setTransform(1, 0, 0, 1, 0, 0);\n    ctx.scale(dpr, dpr);\n\n    // Initialize particles\n    particles.current = Array.from({ length: PARTICLE_COUNT }, () => createParticle(width, height));\n\n    function animate(now) {\n      ctx.clearRect(0, 0, width, height);\n      for (let p of particles.current) {\n        // Flicker\n        p.flicker += p.flickerSpeed;\n        let flicker = 0.7 + 0.3 * Math.sin(p.flicker);\n        // Occasional flash\n        p.flashTimer -= (now - lastTime.current) / 1000;\n        if (p.flashTimer < 0) {\n          p.flash = true;\n          p.flashTimer = Math.random() * 6 + 2;\n        }\n        if (p.flash) {\n          flicker = 1.5;\n          p.flash = false;\n        }\n        // Draw glow\n        ctx.save();\n        ctx.globalAlpha = 0.18 * p.opacity * flicker;\n        ctx.beginPath();\n        ctx.arc(p.x, p.y, p.size * 8, 0, 2 * Math.PI);\n        ctx.fillStyle = GLOW;\n        ctx.shadowColor = COLOR;\n        ctx.shadowBlur = 16;\n        ctx.fill();\n        ctx.restore();\n        // Draw core\n        ctx.save();\n        ctx.globalAlpha = p.opacity * flicker;\n        ctx.beginPath();\n        ctx.arc(p.x, p.y, p.size, 0, 2 * Math.PI);\n        ctx.fillStyle = COLOR;\n        ctx.shadowColor = COLOR;\n        ctx.shadowBlur = 8;\n        ctx.fill();\n        ctx.restore();\n        // Move\n        p.x += Math.cos(p.direction) * p.speed;\n        p.y += Math.sin(p.direction) * p.speed;\n        // Wrap around\n        if (p.x < -20) p.x = width + 20;\n        if (p.x > width + 20) p.x = -20;\n        if (p.y < -20) p.y = height + 20;\n        if (p.y > height + 20) p.y = -20;\n      }\n      lastTime.current = now;\n      animationRef.current = requestAnimationFrame(animate);\n    }\n    animationRef.current = requestAnimationFrame(animate);\n\n    function handleResize() {\n      width = window.innerWidth;\n      height = window.innerHeight;\n      dpr = window.devicePixelRatio || 1;\n      canvas.width = width * dpr;\n      canvas.height = height * dpr;\n      canvas.style.width = width + 'px';\n      canvas.style.height = height + 'px';\n      ctx.setTransform(1, 0, 0, 1, 0, 0);\n      ctx.scale(dpr, dpr);\n      // Reposition particles\n      particles.current.forEach(p => {\n        p.x = Math.random() * width;\n        p.y = Math.random() * height;\n      });\n    }\n    window.addEventListener('resize', handleResize);\n    return () => {\n      cancelAnimationFrame(animationRef.current);\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  return (\n    <canvas\n      ref={canvasRef}\n      style={{\n        position: 'fixed',\n        top: 0,\n        left: 0,\n        width: '100vw',\n        height: '100vh',\n        pointerEvents: 'none',\n        zIndex: 2,\n      }}\n    />\n  );\n};\n\nexport default Particles; ","import React, { useEffect, useRef } from 'react';\nimport './Experience.css';\nimport { gsap } from 'gsap';\nimport { ScrollTrigger } from 'gsap/ScrollTrigger';\nimport Particles from './Particles';\nimport ExpBackground from '../../assets/Exp Background.png';\n\ngsap.registerPlugin(ScrollTrigger);\n\nconst Experience = () => {\n  const sectionRef = useRef(null);\n  const headerRef = useRef(null);\n  const panelsRef = useRef([]);\n  const rolesRef = useRef([]);\n\n  // Clear role refs on each render\n  rolesRef.current = [];\n\n  // Parallax background effect\n  useEffect(() => {\n    const handleScroll = () => {\n      const bg = document.getElementById('exp-bg-img');\n      if (bg) {\n        const y = window.scrollY * 0.25;\n        bg.style.transform = `translateY(${y}px)`;\n      }\n    };\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, []);\n\n  useEffect(() => {\n    // Pin the header\n    ScrollTrigger.create({\n      trigger: sectionRef.current,\n      start: 'top top',\n      end: 'bottom bottom',\n      pin: headerRef.current,\n      pinSpacing: false,\n    });\n\n    // Animate company panels\n    panelsRef.current.forEach((panel, index) => {\n      gsap.fromTo(\n        panel,\n        { opacity: 0, y: 60 },\n        {\n          opacity: 1,\n          y: 0,\n          duration: 1.2,\n          ease: 'power2.inOut',\n          scrollTrigger: {\n            trigger: panel,\n            start: 'top 80%',\n            end: 'bottom center',\n            toggleActions: 'play none none reverse',\n          },\n        }\n      );\n    });\n\n    // Animate roles and bullets\n    rolesRef.current.forEach((role, roleIndex) => {\n      const bullets = role.querySelectorAll('li');\n      gsap.fromTo(\n        role,\n        { opacity: 0, y: 40 },\n        {\n          opacity: 1,\n          y: 0,\n          duration: 0.8,\n          ease: 'power2.inOut',\n          scrollTrigger: {\n            trigger: role,\n            start: 'top 85%',\n            end: 'bottom center',\n            toggleActions: 'play none none reverse',\n          },\n        }\n      );\n      bullets.forEach((bullet, bulletIndex) => {\n        gsap.fromTo(\n          bullet,\n          { opacity: 0, y: 20 },\n          {\n            opacity: 1,\n            y: 0,\n            duration: 0.5,\n            delay: bulletIndex * 0.13,\n            ease: 'power2.inOut',\n            scrollTrigger: {\n              trigger: role,\n              start: 'top 85%',\n              end: 'bottom center',\n              toggleActions: 'play none none reverse',\n            },\n          }\n        );\n      });\n    });\n\n    return () => {\n      ScrollTrigger.getAll().forEach(trigger => trigger.kill());\n    };\n  }, []);\n\n  const experiences = [\n    {\n      company: 'DBS Bank Ltd',\n      period: 'Aug 2022 - Aug 2023',\n      roles: [\n        {\n          title: 'AI Solution Architect — Bank Statement Analysis',\n          achievements: [\n            'Led AI-driven innovations expanding LLM-powered functionality.',\n            'Integrated AI-powered analytics into banking workflows.',\n            'Mentored junior engineers and analysts, enabling first-sprint contributions.',\n            'Authored technical documentation and onboarding guides.'\n          ]\n        },\n        {\n          title: 'Machine Learning Engineer — Bank Statement Analysis',\n          achievements: [\n            'Built key components for DBS 110 project — reducing SME loan disbursement to under 3 mins.',\n            'Refactored backend Python systems to optimize performance.',\n            'Improved SQL queries, cutting debugging time by 40%.',\n            'Implemented Docker-based CI/CD, reducing setup time by 50% (Special Recognition Award).',\n            'Developed GPT-powered semantic extraction processing 20K+ docs/day.'\n          ]\n        },\n        {\n          title: 'Machine Learning Operations Engineer — AutoFin Module',\n          achievements: [\n            'Won internal hackathon building automated retraining pipelines.',\n            'Deployed robust MLOps pipelines for system reliability.',\n            'Automated data validation, monitoring, deployment — reducing manual debugging efforts.',\n            'Improved model stability, minimizing degradation over time.'\n          ]\n        }\n      ]\n    },\n    {\n      company: 'AceTech Pvt Ltd',\n      period: 'Jul 2021 – Jul 2022',\n      roles: [\n        {\n          title: 'Machine Learning Engineer',\n          achievements: [\n            'Built predictive maintenance ML models for Cisco networks reducing downtime by 20%.',\n            'Deployed real-time anomaly detection for operations and cybersecurity teams.',\n            'Led hybrid cloud migration to AWS and Kubernetes for better scalability.',\n            'Piloted proactive monitoring system, dropping downtime incidents by 50%.'\n          ]\n        }\n      ]\n    }\n  ];\n\n  return (\n    <section id=\"experience\" className=\"experience-section\" ref={sectionRef}>\n      {/* Background Image Layer */}\n      <img\n        id=\"exp-bg-img\"\n        src={ExpBackground}\n        alt=\"Experience Background\"\n        className=\"exp-bg-img\"\n        draggable=\"false\"\n      />\n      {/* Mobile Overlay for Readability */}\n      <div className=\"exp-bg-mobile-overlay\" />\n      {/* Particles Overlay */}\n      <Particles />\n      {/* Content */}\n      <div className=\"experience-header\" ref={headerRef}>\n        <h2>The Training Logs of My Career</h2>\n      </div>\n      <div className=\"experience-panels\">\n        {experiences.map((exp, index) => (\n          <div\n            key={index}\n            className=\"experience-panel\"\n            ref={el => (panelsRef.current[index] = el)}\n          >\n            <div className=\"company-header\">\n              <h3>{exp.company}</h3>\n              <span className=\"period\">{exp.period}</span>\n            </div>\n            {exp.roles.map((role, roleIndex) => (\n              <div\n                key={roleIndex}\n                className=\"role-container\"\n                ref={el => {\n                  if (el) rolesRef.current.push(el);\n                }}\n              >\n                <h4>{role.title}</h4>\n                <ul>\n                  {role.achievements.map((achievement, achievementIndex) => (\n                    <li key={achievementIndex}>{achievement}</li>\n                  ))}\n                </ul>\n              </div>\n            ))}\n          </div>\n        ))}\n      </div>\n    </section>\n  );\n};\n\nexport default Experience; "],"names":["COLOR","randomBetween","a","b","Math","random","Particles","canvasRef","useRef","animationRef","particles","lastTime","useEffect","canvas","current","ctx","getContext","width","window","innerWidth","height","innerHeight","dpr","devicePixelRatio","handleResize","style","setTransform","scale","forEach","p","x","y","Array","from","length","angle","PI","size","baseSize","speed","direction","flicker","flickerSpeed","flashTimer","flash","opacity","createParticle","requestAnimationFrame","animate","now","clearRect","sin","save","globalAlpha","beginPath","arc","fillStyle","shadowColor","shadowBlur","fill","restore","cos","addEventListener","cancelAnimationFrame","removeEventListener","_jsx","ref","position","top","left","pointerEvents","zIndex","gsap","registerPlugin","ScrollTrigger","Experience","sectionRef","headerRef","panelsRef","rolesRef","handleScroll","bg","document","getElementById","scrollY","transform","create","trigger","start","end","pin","pinSpacing","panel","index","fromTo","duration","ease","scrollTrigger","toggleActions","role","roleIndex","bullets","querySelectorAll","bullet","bulletIndex","delay","getAll","kill","_jsxs","id","className","children","src","ExpBackground","alt","draggable","company","period","roles","title","achievements","map","exp","el","push","achievement","achievementIndex"],"sourceRoot":""}